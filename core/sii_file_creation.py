"""
Generates .sii definition files for truck and trailer paint jobs in ETS2/ATS.

These files define the main accessory data for a paint job, linking to shared
attributes (.sui files) and texture object files (.tobj). They specify which
truck cabins or trailer parts the paint job is suitable for.
"""
from pathlib import Path
from core.config import create_mask_sui, create_metallic_sui

def create_truck_sii(paint_id: str, path: Path, model: str) -> None:
    """
    Creates a .sii file for a truck paint job.

    The file defines an accessory_paint_job_data unit, specifying:
    - Includes for shared, metallic, and mask SUI files.
    - Suitability for various cabin types of the given truck model.
    - The path to the main paint job texture object (.tobj).

    Args:
        paint_id (str): The unique identifier for the paint job (e.g., "skin001").
        path (Path): The full path where the .sii file will be saved.
        model (str): The internal game model name of the truck (e.g., "scania.s_2016").
    """
    # Construct the internal SiiNunit base name for the paint job
    base_name = f"{paint_id}_0.{model}.paint_job"
    
    # Dynamically construct the content
    content_lines = [
        "SiiNunit",
        "{",
        f"accessory_paint_job_data: {base_name}",
        "{",
        f'@include "{paint_id}_shared.sui"     # Shared paint job attributes (price, name, etc.)'
    ]
    if create_metallic_sui:
        content_lines.append(f'@include "{paint_id}_metallic.sui"  # Optional: Metallic paint properties')
    if create_mask_sui:
        content_lines.append(f'@include "{paint_id}_mask.sui"      # Optional: Paint mask properties')
    
    content_lines.extend([
        "",
        "# Specifies which truck cabins this paint job can be applied to.",
        "# Common cabin types are listed; specific games/trucks might have more/less.",
        f'suitable_for[]: "l2h1.{model}.cabin"',
        f'suitable_for[]: "l2h2.{model}.cabin"',
        f'suitable_for[]: "l2h3.{model}.cabin"',
        f'suitable_for[]: "l2h3_8x4.{model}.cabin"', # Example for 8x4 chassis cabins
        "",
        "# Path to the texture object (.tobj) file for this paint job.",
        "# The \"_0\" in the TOBJ filename is a common convention for truck base textures.",
        f'paint_job_mask: "/vehicle/truck/upgrade/paintjob/{model}/{paint_id}/{paint_id}_0.tobj"',
        "}",
        "}"
    ])
    content = "\n".join(content_lines)

    # Write the generated content to the specified file path
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)
    print(f"    Successfully created truck SII: {path}")

def create_trailer_sii(paint_id: str, path: Path, model: str) -> None:
    """
    Creates a .sii file for a trailer paint job.

    The file defines an accessory_paint_job_data unit, specifying:
    - Includes for shared, metallic, and mask SUI files.
    - The path to the main paint job texture object (.tobj).
    - Unlike trucks, trailer .sii files usually don't list 'suitable_for[]' here,
      as suitability is often defined by the trailer definition itself or body type.

    Args:
        paint_id (str): The unique identifier for the paint job (e.g., "skin001").
        path (Path): The full path where the .sii file will be saved.
        model (str): The internal game model name of the trailer (e.g., "scs_box").
    """
    # Construct the internal SiiNunit base name for the paint job
    base_name = f"{paint_id}.{model}.paint_job"
    
    # Dynamically construct the content
    content_lines = [
        "SiiNunit",
        "{",
        "# Generated by ETS2/ATS Skin Pack Builder",
        "",
        f"accessory_paint_job_data: {base_name}",
        "{",
        "",
        f'@include "{paint_id}_shared.sui"     # Shared paint job attributes'
    ]
    if create_metallic_sui:
        content_lines.append(f'@include "{paint_id}_metallic.sui"  # Optional: Metallic paint properties')
    if create_mask_sui:
        content_lines.append(f'@include "{paint_id}_mask.sui"      # Optional: Paint mask properties')
    
    content_lines.extend([
        "",
        "# Path to the texture object (.tobj) file for this paint job.",
        "# \"_shared\" in the TOBJ filename is a common convention for trailer textures.",
        f'paint_job_mask: "/vehicle/trailer_owned/upgrade/paintjob/{model}/{paint_id}/{paint_id}_shared.tobj"',
        "",
        "}",
        "}"
    ])
    content = "\n".join(content_lines)

    # Write the generated content to the specified file path
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)
    print(f"    Successfully created trailer SII: {path}")

# Example comment for a section, if needed.
# {trailer} tag seems to be a leftover or placeholder, can be removed if not used.