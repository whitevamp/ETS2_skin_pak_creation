"""
Generates .mat (material) files for UI elements in ETS2/ATS mods.

.mat files define how textures are rendered, including the shader effect to use
and properties like texture addressing and filtering. For UI elements, these
are typically simple, pointing to a .tobj file for the texture.
"""
from pathlib import Path

def create_ui_mat(paint_id: str, output_folder: Path) -> None:
    """
    Creates a .mat file for a UI paint job icon.

    This .mat file defines a simple UI material that references the
    paint job's UI texture object (.tobj). It uses the "ui.rfx" effect,
    which is standard for UI elements in the game. Texture addressing is
    set to "clamp" to prevent wrapping, and mip_filter is "none" as
    mipmaps are not typically used for UI icons in this context.

    Args:
        paint_id (str): The unique identifier for the paint job, used to
                        name the .mat file and reference the corresponding .tobj file.
                        (e.g., "skin001").
        output_folder (Path): The directory where the .mat file will be saved.
                              The filename will be `[paint_id].mat`.
    """
    # Construct the full path for the output .mat file
    mat_filepath = output_folder / f"{paint_id}.mat"
    
    # Define the content of the .mat file
    # - effect: "ui.rfx" is a common shader for UI elements.
    # - texture: Defines the source texture.
    #   - source: Points to the .tobj file for this paint_id.
    #   - u_address/v_address: "clamp" prevents texture repeating at edges.
    #   - mip_filter: "none" as UI icons usually don't need mipmaps.
    content = f"""# Generated by ETS2/ATS Skin Pack Builder: UI Material File
effect : "ui.rfx" {{
	texture : "texture" {{
		source : "{paint_id}.tobj"
		u_address : clamp
		v_address : clamp
		mip_filter : none
	}}
}}"""
    
    # Write the content to the .mat file
    try:
        with open(mat_filepath, "w", encoding="utf-8") as f:
            f.write(content)
        print(f"    Successfully created UI MAT: {mat_filepath}")
    except IOError as e:
        print(f"‚ùå Error writing UI MAT file '{mat_filepath}': {e}")
        raise # Re-raise to allow calling function to handle
