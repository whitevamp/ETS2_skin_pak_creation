using System.IO;
using System.Text; // For StringBuilder
using System.Threading.Tasks;

namespace SkinPackCreator.Core.Builders
{
    public class TobjBuilder
    {
        // Generates the string content for a .tobj file.
        // texturePathInTobj: The full relative path to the texture file (e.g., ".dds") 
        //                    as it should appear inside the .tobj file's "texture" property.
        //                    Example: "/material/ui/accessory/my_skin_ui.dds" or 
        //                             "/vehicle/truck/upgrade/paintjob/scania.s_2016/skin123/skin123_0..dds"
        //
        // The content generated matches the 'default' save mode from the original Python script.
        public string BuildTobjContent(string texturePathInTobj)
        {
            if (string.IsNullOrWhiteSpace(texturePathInTobj))
            {
                // Consider throwing an ArgumentNullException or ArgumentException
                // for better error reporting if this case is not expected to be handled by returning empty.
                return string.Empty; 
            }

            // The texture_name property in TOBJ is just the filename part.
            string textureNameOnly = Path.GetFileName(texturePathInTobj);

            // The path in the "texture" property sometimes has ".." before the extension for truck paintjobs,
            // e.g., "/vehicle/truck/upgrade/paintjob/model/paint_id/paint_id_0..dds"
            // This should be preserved as passed in texturePathInTobj.

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("{");
            sb.AppendLine($" texture: "{texturePathInTobj}""); // Full path as seen by the game
            sb.AppendLine($" texture_name: "{textureNameOnly}""); // Just the filename part
            sb.AppendLine(" mipmaps: yes");
            sb.AppendLine(" type: 2d");
            sb.AppendLine(" wrap_u: repeat");
            sb.AppendLine(" wrap_v: repeat");
            sb.AppendLine(" filter_min: trilinear");
            sb.AppendLine(" filter_mag: trilinear");
            sb.AppendLine(" filter_mip: trilinear");
            sb.AppendLine(" anisotropy_factor: 16.000000"); // Default from Python script's "default" save_mode
            sb.AppendLine(" LodBias: -2.000000");          // Default from Python script's "default" save_mode
            sb.AppendLine("}");

            return sb.ToString();
        }

        // Asynchronously saves the TOBJ content to the specified file path.
        // tobjFilePath: The full path where the .tobj file should be saved.
        // content: The string content generated by BuildTobjContent.
        // Returns true if saving was successful, false otherwise.
        public async Task<bool> SaveTobjFileAsync(string tobjFilePath, string content)
        {
            if (string.IsNullOrWhiteSpace(tobjFilePath))
            {
                // Log error: Tobj file path is null or whitespace.
                return false;
            }
            if (string.IsNullOrWhiteSpace(content))
            {
                // Log error: Tobj content is null or whitespace.
                return false;
            }

            try
            {
                string? directory = Path.GetDirectoryName(tobjFilePath);
                if (directory != null && !Directory.Exists(directory))
                {
                    Directory.CreateDirectory(directory);
                }
                // TOBJ files are typically ASCII/UTF-8. UTF-8 without BOM is safest.
                await File.WriteAllTextAsync(tobjFilePath, content, new UTF8Encoding(false));
                return true;
            }
            catch (IOException ex) // More specific exception
            {
                // Log error: IO exception during Tobj file save. Message: ex.Message
                return false;
            }
            catch (System.Exception ex) // Catch-all for other unexpected errors
            {
                // Log error: Unexpected exception during Tobj file save. Message: ex.Message
                return false;
            }
        }
    }
}
