using System.IO;
using System.Text;
using System.Threading.Tasks;

namespace SkinPackCreator.Core.Builders
{
    public class MatBuilder
    {
        // Generates the string content for a UI .mat file.
        // baseTextureName: The base name for the texture and tobj files, without extension. 
        //                  Example: "paintjob001_ui_accessory". 
        //                  The .mat file will be named "{baseTextureName}.mat",
        //                  and it will reference "{baseTextureName}.tobj".
        //
        // The Python script's create_ui_mat.py implies that the game resolves 
        // the .tobj reference relative to the .mat file's location.
        // Therefore, the 'texture' property in the .mat file only needs the .tobj filename.
        public string BuildUiMatContent(string baseTextureName)
        {
            if (string.IsNullOrWhiteSpace(baseTextureName))
            {
                // Consider ArgumentNullException or ArgumentException for error handling strategy
                return string.Empty; 
            }

            string tobjFileName = baseTextureName + ".tobj"; // Filename of the .tobj to be referenced

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("material : "ui.tex""); // Effect type used for UI elements
            sb.AppendLine("{");
            sb.AppendLine($"	texture : "{tobjFileName}""); // Reference to the .tobj file (filename only)
            sb.AppendLine("	texture_name : "texture_name""); // This seems to be a static required value
            sb.AppendLine("	tex_coord_x : 1.0"); // Texture X coordinate scaling/tiling
            sb.AppendLine("	tex_coord_y : 1.0"); // Texture Y coordinate scaling/tiling
            sb.AppendLine("}");

            return sb.ToString();
        }

        // Asynchronously saves the .mat content to the specified file path.
        // matFilePath: The full path where the .mat file should be saved.
        // content: The string content generated by BuildUiMatContent.
        // Returns true if saving was successful, false otherwise.
        public async Task<bool> SaveMatFileAsync(string matFilePath, string content)
        {
            if (string.IsNullOrWhiteSpace(matFilePath))
            {
                // Log error: Mat file path is null or whitespace
                return false;
            }
            if (string.IsNullOrWhiteSpace(content))
            {
                // Log error: Mat content is null or whitespace
                return false;
            }

            try
            {
                string? directory = Path.GetDirectoryName(matFilePath);
                if (directory != null && !Directory.Exists(directory))
                {
                    Directory.CreateDirectory(directory);
                }
                // .mat files are typically ASCII/UTF-8. UTF-8 without BOM is safest.
                await File.WriteAllTextAsync(matFilePath, content, new UTF8Encoding(false));
                return true;
            }
            catch (IOException ex)
            {
                // Log error: IO exception during .mat file save. Message: ex.Message
                return false;
            }
            catch (System.Exception ex) // Catch-all for other unexpected errors
            {
                // Log error: Unexpected exception during .mat file save. Message: ex.Message
                return false;
            }
        }
    }
}
