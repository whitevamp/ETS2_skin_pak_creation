using System.Collections.Generic;
using System.IO; // Required for Path.Combine

namespace SkinPackCreator.Core.Models
{
    public class ProjectSettings
    {
        public string? InputImagePath { get; set; }
        public string? OutputDirectory { get; set; }
        // TempDirectory will be a sub-folder of OutputDirectory, named "temp_working"
        // It's derived, so no separate setter, but the path needs to be creatable.
        public string? TexconvPath { get; set; }

        public string ModName { get; set; } = "My Custom Skin Pack";
        public string ModAuthor { get; set; } = "Your Name";
        public string ModVersion { get; set; } = "1.0";
        public string ModDescription { get; set; } = "A custom skin pack generated by SkinPackCreator.";
        public bool PackToScsArchive { get; set; } = true;
        public string PaintJobPrefix { get; set; } = "skin"; // From python config paint_job_prefix

        // Tuple for resolution
        public (int Width, int Height) MainImageResolution { get; set; } = (4096, 4096);
        public (int Width, int Height) UiAccessoryResolution { get; set; } = (256, 256); // From python config ui_accessory_resolution

        public string DdsFormat { get; set; } = "DXT5"; // From python config dds_format

        public int Price { get; set; } = 0; // Default from Python
        public int UnlockLevel { get; set; } = 0; // Default from Python

        public List<string> SelectedTrucks { get; set; } = new List<string>();
        public List<string> SelectedTrailers { get; set; } = new List<string>();

        // Read-only properties for derived paths and names
        public string OutputModFolderName => string.IsNullOrWhiteSpace(ModName) ? "untitled_mod" : ModName.Replace(" ", "_").ToLowerInvariant();
        
        public string FullOutputDirectoryPath
        {
            get
            {
                if (string.IsNullOrWhiteSpace(OutputDirectory) || string.IsNullOrWhiteSpace(OutputModFolderName))
                    // Consider throwing an InvalidOperationException if OutputDirectory is not set,
                    // as other paths depend on it. For now, returning a clearly invalid path.
                    return System.AppContext.BaseDirectory; // Or some other sensible default or error path
                return Path.Combine(OutputDirectory, OutputModFolderName);
            }
        }

        public string TempDirectoryPath
        {
            get
            {
                if (string.IsNullOrWhiteSpace(OutputDirectory))
                     return Path.Combine(System.AppContext.BaseDirectory, "temp_working_" + OutputModFolderName); // Fallback if OutputDirectory is null
                return Path.Combine(OutputDirectory, "temp_working_" + OutputModFolderName); 
            }
        }
        
        // Path for the manifest.sii, description.txt, and icon.jpg within the FullOutputDirectoryPath
        public string RootModFilesPath => FullOutputDirectoryPath; 

        public string UiAccessoryMaterialPath => Path.Combine(FullOutputDirectoryPath, "material", "ui", "accessory");

        public string TruckPaintJobBasePath => Path.Combine(FullOutputDirectoryPath, "vehicle", "truck", "upgrade", "paintjob");
        public string TruckDefBasePath => Path.Combine(FullOutputDirectoryPath, "def", "vehicle", "truck");

        public string TrailerPaintJobBasePath => Path.Combine(FullOutputDirectoryPath, "vehicle", "trailer_owned", "upgrade", "paintjob");
        public string TrailerDefBasePath => Path.Combine(FullOutputDirectoryPath, "def", "vehicle", "trailer_owned");
        
        public string ModIconFileName { get; set; } = "mod_icon.jpg";
        public string ModIconPath => Path.Combine(FullOutputDirectoryPath, ModIconFileName); // Corrected to FullOutputDirectoryPath

        public void CreateOutputDirectories()
        {
            if (string.IsNullOrWhiteSpace(OutputDirectory))
            {
                 // This case should ideally be prevented by UI validation before calling this.
                 // If OutputDirectory is null here, FullOutputDirectoryPath would point to a base directory,
                 // which might not be what the user intends for mod file output.
                 // For now, we'll proceed, but this highlights a need for validation.
                 // Consider throwing an InvalidOperationException("Output directory is not set.")
            }

            System.IO.Directory.CreateDirectory(FullOutputDirectoryPath);
            System.IO.Directory.CreateDirectory(TempDirectoryPath);
            System.IO.Directory.CreateDirectory(UiAccessoryMaterialPath);
            // Base paths are created here. Model-specific subfolders will be created during processing.
            System.IO.Directory.CreateDirectory(TruckPaintJobBasePath); 
            System.IO.Directory.CreateDirectory(TruckDefBasePath);      
            System.IO.Directory.CreateDirectory(TrailerPaintJobBasePath); 
            System.IO.Directory.CreateDirectory(TrailerDefBasePath);    
        }
    }
}
