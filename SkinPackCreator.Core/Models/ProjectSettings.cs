using System.Collections.Generic;
using System.IO; // Required for Path.Combine

namespace SkinPackCreator.Core.Models
{
    /// <summary>
    /// Holds all settings related to the skin pack generation project.
    /// These settings are typically configured by the user through the UI.
    /// </summary>
    public class ProjectSettings
    {
        /// <summary>
        /// Gets or sets the path to the primary input image for the skin.
        /// </summary>
        public string? InputImagePath { get; set; }

        /// <summary>
        /// Gets or sets the main output directory where the mod folder and SCS archive will be saved.
        /// </summary>
        public string? OutputDirectory { get; set; }

        /// <summary>
        /// Gets or sets the path to the texconv.exe utility.
        /// Corresponds to 'texconv_path' in the Python configuration.
        /// </summary>
        public string? TexconvPath { get; set; }

        /// <summary>
        /// Gets or sets the display name of the mod.
        /// Corresponds to 'mod_name' in the Python configuration.
        /// </summary>
        public string ModName { get; set; } = "My Custom Skin Pack";

        /// <summary>
        /// Gets or sets the author of the mod.
        /// Corresponds to 'mod_author' in the Python configuration.
        /// </summary>
        public string ModAuthor { get; set; } = "Your Name";

        /// <summary>
        /// Gets or sets the version of the mod.
        /// Corresponds to 'mod_version' in the Python configuration.
        /// </summary>
        public string ModVersion { get; set; } = "1.0";

        /// <summary>
        /// Gets or sets the description content for the mod.
        /// Corresponds to 'mod_description_content' in the Python configuration.
        /// </summary>
        public string ModDescription { get; set; } = "A custom skin pack generated by SkinPackCreator.";

        /// <summary>
        /// Gets or sets a value indicating whether to package the mod into an .scs archive after generation.
        /// Corresponds to 'generate_zip' in the Python configuration.
        /// </summary>
        public bool PackToScsArchive { get; set; } = true;

        /// <summary>
        /// Gets or sets the prefix used for generating unique paint job IDs (e.g., "skin" -> "skin001").
        /// Corresponds to 'paint_job_prefix' in the Python configuration.
        /// </summary>
        public string PaintJobPrefix { get; set; } = "skin";

        /// <summary>
        /// Gets or sets the resolution (Width, Height) for the main paint job texture.
        /// Corresponds to 'image_resolution' in the Python configuration.
        /// </summary>
        public (int Width, int Height) MainImageResolution { get; set; } = (4096, 4096);

        /// <summary>
        /// Gets or sets the resolution (Width, Height) for the UI accessory icon.
        /// Corresponds to 'ui_accessory_resolution' in the Python configuration.
        /// </summary>
        public (int Width, int Height) UiAccessoryResolution { get; set; } = (256, 256);

        /// <summary>
        /// Gets or sets the DDS compression format to be used (e.g., "DXT5").
        /// Corresponds to 'dds_format' in the Python configuration.
        /// </summary>
        public string DdsFormat { get; set; } = "DXT5";

        /// <summary>
        /// Gets or sets the in-game price for the paint job.
        /// Default is 0.
        /// </summary>
        public int Price { get; set; } = 0;

        /// <summary>
        /// Gets or sets the in-game unlock level for the paint job.
        /// Default is 0.
        /// </summary>
        public int UnlockLevel { get; set; } = 0;

        /// <summary>
        /// Gets or sets the list of selected truck internal names for which the skin will be generated.
        /// </summary>
        public List<string> SelectedTrucks { get; set; } = new List<string>();

        /// <summary>
        /// Gets or sets the list of selected trailer internal names for which the skin will be generated.
        /// </summary>
        public List<string> SelectedTrailers { get; set; } = new List<string>();

        /// <summary>
        /// Gets the name of the mod folder, derived from <see cref="ModName"/> (e.g., "My Custom Skin Pack" -> "my_custom_skin_pack").
        /// This is used as the root directory name within the output directory.
        /// </summary>
        public string OutputModFolderName => string.IsNullOrWhiteSpace(ModName) ? "untitled_mod" : ModName.Replace(" ", "_").ToLowerInvariant();
        
        /// <summary>
        /// Gets the full path to the root of the generated mod directory (e.g., "C:\Output\my_custom_skin_pack").
        /// This is where all mod files like 'def', 'material', 'vehicle' will reside.
        /// If <see cref="OutputDirectory"/> is not set, it defaults to the application's base directory.
        /// </summary>
        public string FullOutputDirectoryPath
        {
            get
            {
                if (string.IsNullOrWhiteSpace(OutputDirectory) || string.IsNullOrWhiteSpace(OutputModFolderName))
                    // Consider throwing an InvalidOperationException if OutputDirectory is not set,
                    // as other paths depend on it. For now, returning a clearly invalid path.
                    return System.AppContext.BaseDirectory; // Or some other sensible default or error path
                return Path.Combine(OutputDirectory, OutputModFolderName);
            }
        }

        public string TempDirectoryPath
        {
            get
            {
                if (string.IsNullOrWhiteSpace(OutputDirectory))
                     return Path.Combine(System.AppContext.BaseDirectory, "temp_working_" + OutputModFolderName); // Fallback if OutputDirectory is null
                return Path.Combine(OutputDirectory, "temp_working_" + OutputModFolderName); 
            }
        }
        
        /// <summary>
        /// Gets the path to the root of the mod files where manifest.sii, description.txt, and mod_icon.jpg are stored.
        /// This is equivalent to <see cref="FullOutputDirectoryPath"/>.
        /// </summary>
        public string RootModFilesPath => FullOutputDirectoryPath; 

        /// <summary>
        /// Gets the path to the directory where UI accessory material files (.mat, .tobj, .dds) are stored.
        /// Typically 'output_mod_folder/material/ui/accessory'.
        /// </summary>
        public string UiAccessoryMaterialPath => Path.Combine(FullOutputDirectoryPath, "material", "ui", "accessory");

        /// <summary>
        /// Gets the base path for truck paint job files (DDS textures, TOBJ files).
        /// Typically 'output_mod_folder/vehicle/truck/upgrade/paintjob'.
        /// </summary>
        public string TruckPaintJobBasePath => Path.Combine(FullOutputDirectoryPath, "vehicle", "truck", "upgrade", "paintjob");

        /// <summary>
        /// Gets the base path for truck definition files (.sii, .sui).
        /// Typically 'output_mod_folder/def/vehicle/truck'.
        /// </summary>
        public string TruckDefBasePath => Path.Combine(FullOutputDirectoryPath, "def", "vehicle", "truck");

        /// <summary>
        /// Gets the base path for trailer paint job files (DDS textures, TOBJ files).
        /// Typically 'output_mod_folder/vehicle/trailer_owned/upgrade/paintjob'.
        /// </summary>
        public string TrailerPaintJobBasePath => Path.Combine(FullOutputDirectoryPath, "vehicle", "trailer_owned", "upgrade", "paintjob");

        /// <summary>
        /// Gets the base path for trailer definition files (.sii, .sui).
        /// Typically 'output_mod_folder/def/vehicle/trailer_owned'.
        /// </summary>
        public string TrailerDefBasePath => Path.Combine(FullOutputDirectoryPath, "def", "vehicle", "trailer_owned");
        
        /// <summary>
        /// Gets or sets the filename for the mod icon (e.g., "mod_icon.jpg").
        /// This file is placed at the root of the mod.
        /// Corresponds to 'mod_icon_path' in the Python configuration (filename part).
        /// </summary>
        public string ModIconFileName { get; set; } = "mod_icon.jpg";

        /// <summary>
        /// Gets the full path to the mod icon file.
        /// </summary>
        public string ModIconPath => Path.Combine(FullOutputDirectoryPath, ModIconFileName);

        /// <summary>
        /// Creates all necessary output directories for the mod structure based on the current settings.
        /// This includes the main mod folder, temporary folder, and subfolders for materials, definitions, and vehicle paint jobs.
        /// </summary>
        public void CreateOutputDirectories()
        {
            if (string.IsNullOrWhiteSpace(OutputDirectory))
            {
                 // This case should ideally be prevented by UI validation before calling this.
                 // If OutputDirectory is null here, FullOutputDirectoryPath would point to a base directory,
                 // which might not be what the user intends for mod file output.
                 // For now, we'll proceed, but this highlights a need for validation.
                 // Consider throwing an InvalidOperationException("Output directory is not set.")
            }

            System.IO.Directory.CreateDirectory(FullOutputDirectoryPath);
            System.IO.Directory.CreateDirectory(TempDirectoryPath);
            System.IO.Directory.CreateDirectory(UiAccessoryMaterialPath);
            // Base paths are created here. Model-specific subfolders will be created during processing.
            System.IO.Directory.CreateDirectory(TruckPaintJobBasePath); 
            System.IO.Directory.CreateDirectory(TruckDefBasePath);      
            System.IO.Directory.CreateDirectory(TrailerPaintJobBasePath); 
            System.IO.Directory.CreateDirectory(TrailerDefBasePath);    
        }
    }
}
